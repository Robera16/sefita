development process
1, 
	create folder
	install(initialize) django using (pipenv install django->generates 'Pipfile,Pipfile.lock like npm)
	activate virtual environment using (pipenv shell)
	install django using sudo apt install django
	create django app with some boilerplate code using(django-admin startproject sefita .)
2, 	
	manage.py->adminstrative purpose, starting webserver,migrating database,populating with data
	sefita - app
		init.py - treat app as a package
		settings.py - configuration setting for sefita app
		urls.py - url endpoints for our application
		wsgi.py - standard web server gateway interface
3, 
	change the default python interprater to the virtual environment interpreter
	install pylint using (pipenv install pylint --dev)
	python3 manage.py runserver (runs on port 8000 by default) - it creates sqlite database
	admin route doesn't work because there is unapplied migration
4,
	in django there are multiple application which represent different part of our web application(based on fuctionality)
	the apps are reusable in other projects
5,
	python3 manage.py startapp records
	records - app
		models.py - represent domain of records(ex,in domain of movies we have movie and genre)
		views.py - view function which pass url to view function which handle request and respond
		mvc - mtv  template as view, and views as controller in django 
6,
	create urls.py which handle a url endpoint to records app
	every app should have a url configuration
	inside views module(views.py) of records define a function which responds to certain endpoint request.
		ex, index func -> HttpResponse('hello world')
	sefita(main app) have no knowldge of records path, so we have to register it using a path object inside sefitaurl
	then run server again using(python3 manage.py runserver)
	urls in Records maps a url endpoint to view function
	urls in sefita(main app) register certain endpoint to app urls(ex localhost/records, to Records.urls)
7,
	create model to represent application data
	in model.py module of Records app create a class which models component of Records app	
	class Record(models.Model) - from django.db import models, this models module handle storing,retrieving, filtering and other operation on database to Record(class) object
8,
	store model object in database(create table on database based on the model object)
	django first compare model class with database table based on that it creates a migration.py when it runs it synchronize database table with model class(python3 manage.py makemigrations). but by default django is not aware of model classes. 
	to make django keep track of model classes register Records app in sefita(main app) settings.py INSTALLED_APPS
	   -- to register the Records app in django we have to make full path of RecordsConfig class inside apps.py of Records app
9,
	"python3 manage.py makemigrations" create a database query to be run on sqlite 
        "python3 manage.py migrate" command run the query on the sqlite
        "python3 manage.py sqlmigrate Records 001" the equivalent sql statement generated by the makemigrations command	
10,	
	python3 manage.py createsuperuser -   to create super user in django(sefita, sefita124578)
	to register Records model(NeckOpening, Record) write admin.site.register({model name}) inside the Records app admin.py
11,
	to customize the displayed column headers in Records app 
	create RecordAdmin(admin.ModelAdmin) class inside admin.py of Records app, then list_diplay('id', 'name')
	and pass this class to admin.site.register(Record, RecordAdmin) as parameter
12,
	Model class provide api(model api) which abstract away the complexity of working with database
	we use this api to get the list of records from our database
		import the Record class from modle.py in to the views 
		Record.objects.all() equivalent sql statement select * from  Records_Record
13,
	Returning html content from view function
	inside the index function of views.py(Records)
	return render(request, 'index.html'<-name of our template, {'records', records}<-as parameter)
	create a template folder inside Records app, add index.html file the test if it works
	template doesn't exist error but append ./
	django looks for the template folder in all the installed apps in order
	if we specify index.html as the above method django loads index.html of the first installed app with this name, so differentiate different apps by adding a folder in templates folder	
	all the templates for the Records app should be prefixed by records/
	the index.html table is render inside base.html
	{% extends 'records/base.html' %} inside index.html	* as a best practic we should namespace our templates
14,
	sharing base.html accross multiple apps
	base.html is found inside templates/records folder of Records app. which is visible to that app only but if we want to 
	share the templates accross multiple folder -:
	 1, create new folder in the root called 'templates'
	 2, move the base.html file inside the roots templates folder
	 3, but django by default looks inside the installed apps
	 4, tell django to search inside the root templates folder by configuring the settings.py of sefita app "templates section" 'DIRS': [os.path.join(BASE_DIR, 'templates')], so django first search inside the root folder templates folder if it don't find it search inside the installed apps
15,
	defind a url that takes a parameter example records/1
	use angle bracket to define a parameter path('<int:record_id>', views.detail, name='detail') like->records/1
16,
	getting a single object records/1
		- python manage.py flush
		- python manage.py createsuperuser	
		- python3 manage.py makemigrations
		- python3 manage.py migrate
	
	<td><a href="/records/{{record.id}}">{{ record.Name }}</a></td>
	<td><a href="{%url 'record_detail' record.id%}">{{ record.Name }}</a></
17,
	django automatically displace the homepage when we register a new urlpatterns(path('records/', include('Records.urls'))) in the urls.py of sefita.
	to create a homepage:
		- create views.py inside sefita app
	
		Python3 push heroku HEAD:master
			
	
	
	
	
	
	
	
	
	
	
	
	
